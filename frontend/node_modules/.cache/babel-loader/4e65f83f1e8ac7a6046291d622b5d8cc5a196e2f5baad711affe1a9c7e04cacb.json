{"ast":null,"code":"var _jsxFileName = \"/Users/nikhilmehra/Downloads/prototype/final/frontend/src/SlotGrid.js\";\nimport React from 'react';\n\n// Helper to format status strings: \"out_of_order\" => \"Out Of Order\"\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction formatStatus(status) {\n  return status.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n}\n\n// Function to check if a slot is booked for the given date/time range\nfunction isSlotBooked(slot, date, start, end, endDate) {\n  // Out of order slots are considered NOT booked for this time window (just unavailable)\n  if (slot.status === 'out_of_order') return false;\n\n  // Reserved slots are always booked\n  if (slot.status === 'reserved') return true;\n\n  // Only \"available\" slots check bookings array\n  if (!slot.bookings || slot.status !== 'available') return false;\n  const reqStart = new Date(`${date}T${start}:00`).getTime();\n  const reqEnd = new Date(`${endDate}T${end}:00`).getTime();\n\n  // Check if any booking overlaps with requested time\n  return slot.bookings.some(b => {\n    const bStart = new Date(`${b.date}T${b.start}:00`).getTime();\n    const bEnd = new Date(`${b.endDate}T${b.end}:00`).getTime();\n    return !(reqEnd <= bStart || reqStart >= bEnd);\n  });\n}\nexport default function SlotGrid({\n  slots,\n  date,\n  start,\n  end,\n  endDate,\n  selectedSlots,\n  toggleSlotSelection,\n  availableSlotData\n}) {\n  if (!slots || !slots.length) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"No slots available.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 39\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"slot-grid\",\n    children: slots.map(slot => {\n      const slotData = availableSlotData.find(s => s.id === slot.id);\n      const booked = isSlotBooked(slot, date, start, end, endDate);\n      const statusClass = slot.status; // for CSS class styling\n\n      // Determine if slot is selected (for UI)\n      const isSelected = selectedSlots.includes(slot.id);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `slot ${statusClass} ${isSelected ? 'selected' : ''}`,\n        onClick: () => {\n          // Prevent selecting out_of_order or already booked\n          if (slot.status === 'out_of_order' || booked) return;\n          toggleSlotSelection(slot.id);\n        },\n        title: booked ? 'This slot is already booked' : slot.status === 'out_of_order' ? 'This slot is out of order and unavailable' : 'Click to select',\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Slot \", slot.id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this), slotData && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"slot-price\",\n          children: [\"\\u20AC\", slotData.price]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"status\",\n          children: statusClass === 'reserved' ? 'Booked' : formatStatus(slot.status)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this)]\n      }, slot.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_c = SlotGrid;\nvar _c;\n$RefreshReg$(_c, \"SlotGrid\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","formatStatus","status","split","map","word","charAt","toUpperCase","slice","join","isSlotBooked","slot","date","start","end","endDate","bookings","reqStart","Date","getTime","reqEnd","some","b","bStart","bEnd","SlotGrid","slots","selectedSlots","toggleSlotSelection","availableSlotData","length","children","fileName","_jsxFileName","lineNumber","columnNumber","className","slotData","find","s","id","booked","statusClass","isSelected","includes","onClick","title","price","_c","$RefreshReg$"],"sources":["/Users/nikhilmehra/Downloads/prototype/final/frontend/src/SlotGrid.js"],"sourcesContent":["import React from 'react';\n\n// Helper to format status strings: \"out_of_order\" => \"Out Of Order\"\nfunction formatStatus(status) {\n  return status\n    .split('_')\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(' ');\n}\n\n// Function to check if a slot is booked for the given date/time range\nfunction isSlotBooked(slot, date, start, end, endDate) {\n  // Out of order slots are considered NOT booked for this time window (just unavailable)\n  if (slot.status === 'out_of_order') return false;\n\n  // Reserved slots are always booked\n  if (slot.status === 'reserved') return true;\n\n  // Only \"available\" slots check bookings array\n  if (!slot.bookings || slot.status !== 'available') return false;\n\n  const reqStart = new Date(`${date}T${start}:00`).getTime();\n  const reqEnd = new Date(`${endDate}T${end}:00`).getTime();\n\n  // Check if any booking overlaps with requested time\n  return slot.bookings.some(b => {\n    const bStart = new Date(`${b.date}T${b.start}:00`).getTime();\n    const bEnd = new Date(`${b.endDate}T${b.end}:00`).getTime();\n    return !(reqEnd <= bStart || reqStart >= bEnd);\n  });\n}\n\nexport default function SlotGrid({\n  slots,\n  date,\n  start,\n  end,\n  endDate,\n  selectedSlots,\n  toggleSlotSelection,\n  availableSlotData,\n}) {\n  if (!slots || !slots.length) return <p>No slots available.</p>;\n\n  return (\n    <div className=\"slot-grid\">\n      {slots.map(slot => {\n        const slotData = availableSlotData.find(s => s.id === slot.id);\n        const booked = isSlotBooked(slot, date, start, end, endDate);\n        const statusClass = slot.status; // for CSS class styling\n\n        // Determine if slot is selected (for UI)\n        const isSelected = selectedSlots.includes(slot.id);\n\n        return (\n          <div\n            key={slot.id}\n            className={`slot ${statusClass} ${isSelected ? 'selected' : ''}`}\n            onClick={() => {\n              // Prevent selecting out_of_order or already booked\n              if (slot.status === 'out_of_order' || booked) return;\n              toggleSlotSelection(slot.id);\n            }}\n            title={\n              booked\n                ? 'This slot is already booked'\n                : slot.status === 'out_of_order'\n                ? 'This slot is out of order and unavailable'\n                : 'Click to select'\n            }\n          >\n            <p>Slot {slot.id}</p>\n\n            {slotData && (\n              <p className=\"slot-price\">â‚¬{slotData.price}</p>\n            )}\n\n            <p className=\"status\">\n              {statusClass === 'reserved'\n                ? 'Booked'\n                : formatStatus(slot.status)}\n            </p>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,YAAYA,CAACC,MAAM,EAAE;EAC5B,OAAOA,MAAM,CACVC,KAAK,CAAC,GAAG,CAAC,CACVC,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGF,IAAI,CAACG,KAAK,CAAC,CAAC,CAAC,CAAC,CACzDC,IAAI,CAAC,GAAG,CAAC;AACd;;AAEA;AACA,SAASC,YAAYA,CAACC,IAAI,EAAEC,IAAI,EAAEC,KAAK,EAAEC,GAAG,EAAEC,OAAO,EAAE;EACrD;EACA,IAAIJ,IAAI,CAACT,MAAM,KAAK,cAAc,EAAE,OAAO,KAAK;;EAEhD;EACA,IAAIS,IAAI,CAACT,MAAM,KAAK,UAAU,EAAE,OAAO,IAAI;;EAE3C;EACA,IAAI,CAACS,IAAI,CAACK,QAAQ,IAAIL,IAAI,CAACT,MAAM,KAAK,WAAW,EAAE,OAAO,KAAK;EAE/D,MAAMe,QAAQ,GAAG,IAAIC,IAAI,CAAC,GAAGN,IAAI,IAAIC,KAAK,KAAK,CAAC,CAACM,OAAO,CAAC,CAAC;EAC1D,MAAMC,MAAM,GAAG,IAAIF,IAAI,CAAC,GAAGH,OAAO,IAAID,GAAG,KAAK,CAAC,CAACK,OAAO,CAAC,CAAC;;EAEzD;EACA,OAAOR,IAAI,CAACK,QAAQ,CAACK,IAAI,CAACC,CAAC,IAAI;IAC7B,MAAMC,MAAM,GAAG,IAAIL,IAAI,CAAC,GAAGI,CAAC,CAACV,IAAI,IAAIU,CAAC,CAACT,KAAK,KAAK,CAAC,CAACM,OAAO,CAAC,CAAC;IAC5D,MAAMK,IAAI,GAAG,IAAIN,IAAI,CAAC,GAAGI,CAAC,CAACP,OAAO,IAAIO,CAAC,CAACR,GAAG,KAAK,CAAC,CAACK,OAAO,CAAC,CAAC;IAC3D,OAAO,EAAEC,MAAM,IAAIG,MAAM,IAAIN,QAAQ,IAAIO,IAAI,CAAC;EAChD,CAAC,CAAC;AACJ;AAEA,eAAe,SAASC,QAAQA,CAAC;EAC/BC,KAAK;EACLd,IAAI;EACJC,KAAK;EACLC,GAAG;EACHC,OAAO;EACPY,aAAa;EACbC,mBAAmB;EACnBC;AACF,CAAC,EAAE;EACD,IAAI,CAACH,KAAK,IAAI,CAACA,KAAK,CAACI,MAAM,EAAE,oBAAO9B,OAAA;IAAA+B,QAAA,EAAG;EAAmB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;EAE9D,oBACEnC,OAAA;IAAKoC,SAAS,EAAC,WAAW;IAAAL,QAAA,EACvBL,KAAK,CAACtB,GAAG,CAACO,IAAI,IAAI;MACjB,MAAM0B,QAAQ,GAAGR,iBAAiB,CAACS,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAK7B,IAAI,CAAC6B,EAAE,CAAC;MAC9D,MAAMC,MAAM,GAAG/B,YAAY,CAACC,IAAI,EAAEC,IAAI,EAAEC,KAAK,EAAEC,GAAG,EAAEC,OAAO,CAAC;MAC5D,MAAM2B,WAAW,GAAG/B,IAAI,CAACT,MAAM,CAAC,CAAC;;MAEjC;MACA,MAAMyC,UAAU,GAAGhB,aAAa,CAACiB,QAAQ,CAACjC,IAAI,CAAC6B,EAAE,CAAC;MAElD,oBACExC,OAAA;QAEEoC,SAAS,EAAE,QAAQM,WAAW,IAAIC,UAAU,GAAG,UAAU,GAAG,EAAE,EAAG;QACjEE,OAAO,EAAEA,CAAA,KAAM;UACb;UACA,IAAIlC,IAAI,CAACT,MAAM,KAAK,cAAc,IAAIuC,MAAM,EAAE;UAC9Cb,mBAAmB,CAACjB,IAAI,CAAC6B,EAAE,CAAC;QAC9B,CAAE;QACFM,KAAK,EACHL,MAAM,GACF,6BAA6B,GAC7B9B,IAAI,CAACT,MAAM,KAAK,cAAc,GAC9B,2CAA2C,GAC3C,iBACL;QAAA6B,QAAA,gBAED/B,OAAA;UAAA+B,QAAA,GAAG,OAAK,EAACpB,IAAI,CAAC6B,EAAE;QAAA;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,EAEpBE,QAAQ,iBACPrC,OAAA;UAAGoC,SAAS,EAAC,YAAY;UAAAL,QAAA,GAAC,QAAC,EAACM,QAAQ,CAACU,KAAK;QAAA;UAAAf,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAC/C,eAEDnC,OAAA;UAAGoC,SAAS,EAAC,QAAQ;UAAAL,QAAA,EAClBW,WAAW,KAAK,UAAU,GACvB,QAAQ,GACRzC,YAAY,CAACU,IAAI,CAACT,MAAM;QAAC;UAAA8B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5B,CAAC;MAAA,GAzBCxB,IAAI,CAAC6B,EAAE;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OA0BT,CAAC;IAEV,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACa,EAAA,GAvDuBvB,QAAQ;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}