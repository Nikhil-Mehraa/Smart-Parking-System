{"ast":null,"code":"var _jsxFileName = \"/Users/nikhilmehra/Downloads/prototype/final/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useMemo } from 'react';\nimport { io } from 'socket.io-client';\nimport SlotGrid from './SlotGrid';\nimport AnalyticsPage from './AnalyticsPage';\nimport TimeSelector from './TimeSelector';\nimport AuthPage from './AuthPage';\nimport './App.css';\nimport { Chart as ChartJS, ArcElement, BarElement, CategoryScale, LinearScale, Title, Tooltip, Legend } from 'chart.js';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nChartJS.register(ArcElement, BarElement, CategoryScale, LinearScale, Title, Tooltip, Legend);\nfunction App() {\n  _s();\n  // 1. Track current user from localStorage\n  const [currentUser, setCurrentUser] = useState(localStorage.getItem('currentUser'));\n\n  // 2. Logout handler\n  const handleLogout = () => {\n    localStorage.removeItem('currentUser');\n    setCurrentUser(null);\n  };\n\n  // --- YOUR EXISTING DASHBOARD STATE ---\n  const [slots, setSlots] = useState([]);\n  const [selectedSlots, setSelectedSlots] = useState([]);\n  const [showAnalytics, setShowAnalytics] = useState(false);\n  const [date, setDate] = useState('');\n  const [start, setStart] = useState('');\n  const [end, setEnd] = useState('');\n  const [endDate, setEndDate] = useState('');\n  const [availableSlotData, setAvailableSlotData] = useState([]);\n  const [socket, setSocket] = useState(null);\n\n  // --- SOCKET + FETCH LOGIC ---\n\n  useEffect(() => {\n    const newSocket = io('http://localhost:4000');\n    setSocket(newSocket);\n\n    // Listen for slots update\n    const handleSlotsUpdate = slotsData => {\n      setSlots(slotsData);\n\n      // Refetch available slots + prices when we receive updated slots data\n      if (date && start && end && endDate) {\n        fetch('http://localhost:4000/api/available-slots', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            date,\n            start,\n            end,\n            endDate\n          })\n        }).then(res => res.json()).then(data => setAvailableSlotData(data.slots)).catch(err => console.error('Failed to fetch updated slot prices:', err));\n      }\n    };\n    newSocket.on('slots', handleSlotsUpdate);\n    return () => {\n      newSocket.off('slots', handleSlotsUpdate);\n      newSocket.close();\n    };\n  }, [date, start, end, endDate]);\n\n  // Initial fetch of available slots/prices when date/time changes\n  useEffect(() => {\n    if (!date || !start || !end || !endDate) return;\n    fetch('http://localhost:4000/api/available-slots', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        date,\n        start,\n        end,\n        endDate\n      })\n    }).then(res => res.json()).then(data => setAvailableSlotData(data.slots)).catch(err => console.error('Error fetching available slots:', err));\n  }, [date, start, end, endDate]);\n  const toggleSlotSelection = slotId => {\n    setSelectedSlots(prev => prev.includes(slotId) ? prev.filter(id => id !== slotId) : [...prev, slotId]);\n  };\n  const totalPrice = useMemo(() => {\n    return selectedSlots.reduce((sum, slotId) => {\n      const slot = availableSlotData.find(s => s.id === slotId);\n      return sum + ((slot === null || slot === void 0 ? void 0 : slot.price) || 0);\n    }, 0);\n  }, [selectedSlots, availableSlotData]);\n  const handleReserveSelected = () => {\n    if (!selectedSlots.length) {\n      alert('Please select at least one slot.');\n      return;\n    }\n    if (!date || !start || !end || !endDate) {\n      alert('Please select date and time.');\n      return;\n    }\n    if (!socket) {\n      alert('Connection error. Please refresh the page.');\n      return;\n    }\n    socket.emit('bookBulk', {\n      slotIds: selectedSlots,\n      date,\n      start,\n      end,\n      endDate\n    }, response => {\n      if (response.success) {\n        alert('Reservation successful!');\n        setSelectedSlots([]);\n      } else {\n        alert(response.msg || 'Reservation failed. Please try again.');\n      }\n    });\n  };\n\n  // 3. Redirect to AuthPage if not logged in\n  if (!currentUser) {\n    return /*#__PURE__*/_jsxDEV(AuthPage, {\n      onAuthSuccess: () => setCurrentUser(localStorage.getItem('currentUser'))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 12\n    }, this);\n  }\n\n  // 4. Dashboard with Logout (NO OTHER CHANGES)\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Parking Slot Reservation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLogout,\n        className: \"logout-btn\",\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TimeSelector, {\n      date: date,\n      setDate: setDate,\n      start: start,\n      setStart: setStart,\n      end: end,\n      setEnd: setEnd,\n      endDate: endDate,\n      setEndDate: setEndDate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), !showAnalytics ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(SlotGrid, {\n        slots: slots,\n        date: date,\n        start: start,\n        end: end,\n        endDate: endDate,\n        selectedSlots: selectedSlots,\n        toggleSlotSelection: toggleSlotSelection,\n        availableSlotData: availableSlotData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"slot-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"reserve-btn\",\n          onClick: handleReserveSelected,\n          disabled: !selectedSlots.length,\n          children: [\"Reserve Selected (\", selectedSlots.length, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }, this), selectedSlots.length ? /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"price-sum\",\n          children: [\"Total Price: \\u20AC\", totalPrice]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Select slot(s)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"analytics-btn\",\n          onClick: () => setShowAnalytics(true),\n          children: \"Show Analytics\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowAnalytics(false),\n        children: \"\\u2190 Back to Slots\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(AnalyticsPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"/PogaHzMT1Has+ojvKCriyX59bI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","useMemo","io","SlotGrid","AnalyticsPage","TimeSelector","AuthPage","Chart","ChartJS","ArcElement","BarElement","CategoryScale","LinearScale","Title","Tooltip","Legend","jsxDEV","_jsxDEV","Fragment","_Fragment","register","App","_s","currentUser","setCurrentUser","localStorage","getItem","handleLogout","removeItem","slots","setSlots","selectedSlots","setSelectedSlots","showAnalytics","setShowAnalytics","date","setDate","start","setStart","end","setEnd","endDate","setEndDate","availableSlotData","setAvailableSlotData","socket","setSocket","newSocket","handleSlotsUpdate","slotsData","fetch","method","headers","body","JSON","stringify","then","res","json","data","catch","err","console","error","on","off","close","toggleSlotSelection","slotId","prev","includes","filter","id","totalPrice","reduce","sum","slot","find","s","price","handleReserveSelected","length","alert","emit","slotIds","response","success","msg","onAuthSuccess","fileName","_jsxFileName","lineNumber","columnNumber","className","children","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/nikhilmehra/Downloads/prototype/final/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState, useMemo } from 'react';\nimport { io } from 'socket.io-client';\nimport SlotGrid from './SlotGrid';\nimport AnalyticsPage from './AnalyticsPage';\nimport TimeSelector from './TimeSelector';\nimport AuthPage from './AuthPage';\nimport './App.css';\n\nimport { \n  Chart as ChartJS, ArcElement, BarElement, CategoryScale, LinearScale, Title, Tooltip, Legend \n} from 'chart.js';\n\nChartJS.register(ArcElement, BarElement, CategoryScale, LinearScale, Title, Tooltip, Legend);\n\nfunction App() {\n  // 1. Track current user from localStorage\n  const [currentUser, setCurrentUser] = useState(localStorage.getItem('currentUser'));\n\n  // 2. Logout handler\n  const handleLogout = () => {\n    localStorage.removeItem('currentUser');\n    setCurrentUser(null);\n  };\n\n  // --- YOUR EXISTING DASHBOARD STATE ---\n  const [slots, setSlots] = useState([]);\n  const [selectedSlots, setSelectedSlots] = useState([]);\n  const [showAnalytics, setShowAnalytics] = useState(false);\n  const [date, setDate] = useState('');\n  const [start, setStart] = useState('');\n  const [end, setEnd] = useState('');\n  const [endDate, setEndDate] = useState('');\n  const [availableSlotData, setAvailableSlotData] = useState([]);\n  const [socket, setSocket] = useState(null);\n\n  // --- SOCKET + FETCH LOGIC ---\n\n  useEffect(() => {\n    const newSocket = io('http://localhost:4000');\n    setSocket(newSocket);\n\n    // Listen for slots update\n    const handleSlotsUpdate = (slotsData) => {\n      setSlots(slotsData);\n\n      // Refetch available slots + prices when we receive updated slots data\n      if (date && start && end && endDate) {\n        fetch('http://localhost:4000/api/available-slots', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ date, start, end, endDate }),\n        })\n          .then((res) => res.json())\n          .then((data) => setAvailableSlotData(data.slots))\n          .catch((err) => console.error('Failed to fetch updated slot prices:', err));\n      }\n    };\n\n    newSocket.on('slots', handleSlotsUpdate);\n\n    return () => {\n      newSocket.off('slots', handleSlotsUpdate);\n      newSocket.close();\n    };\n  }, [date, start, end, endDate]);\n\n  // Initial fetch of available slots/prices when date/time changes\n  useEffect(() => {\n    if (!date || !start || !end || !endDate) return;\n\n    fetch('http://localhost:4000/api/available-slots', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ date, start, end, endDate }),\n    })\n      .then((res) => res.json())\n      .then((data) => setAvailableSlotData(data.slots))\n      .catch((err) => console.error('Error fetching available slots:', err));\n  }, [date, start, end, endDate]);\n\n  const toggleSlotSelection = (slotId) => {\n    setSelectedSlots((prev) =>\n      prev.includes(slotId) ? prev.filter((id) => id !== slotId) : [...prev, slotId]\n    );\n  };\n\n  const totalPrice = useMemo(() => {\n    return selectedSlots.reduce((sum, slotId) => {\n      const slot = availableSlotData.find((s) => s.id === slotId);\n      return sum + (slot?.price || 0);\n    }, 0);\n  }, [selectedSlots, availableSlotData]);\n\n  const handleReserveSelected = () => {\n    if (!selectedSlots.length) {\n      alert('Please select at least one slot.');\n      return;\n    }\n    if (!date || !start || !end || !endDate) {\n      alert('Please select date and time.');\n      return;\n    }\n    if (!socket) {\n      alert('Connection error. Please refresh the page.');\n      return;\n    }\n\n    socket.emit(\n      'bookBulk',\n      { slotIds: selectedSlots, date, start, end, endDate },\n      (response) => {\n        if (response.success) {\n          alert('Reservation successful!');\n          setSelectedSlots([]);\n        } else {\n          alert(response.msg || 'Reservation failed. Please try again.');\n        }\n      }\n    );\n  };\n\n  // 3. Redirect to AuthPage if not logged in\n  if (!currentUser) {\n    return <AuthPage onAuthSuccess={() => setCurrentUser(localStorage.getItem('currentUser'))} />;\n  }\n\n  // 4. Dashboard with Logout (NO OTHER CHANGES)\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Parking Slot Reservation</h1>\n        <button onClick={handleLogout} className=\"logout-btn\">\n          Logout\n        </button>\n      </header>\n\n      <TimeSelector\n        date={date}\n        setDate={setDate}\n        start={start}\n        setStart={setStart}\n        end={end}\n        setEnd={setEnd}\n        endDate={endDate}\n        setEndDate={setEndDate}\n      />\n\n      {!showAnalytics ? (\n        <>\n          <SlotGrid\n            slots={slots}\n            date={date}\n            start={start}\n            end={end}\n            endDate={endDate}\n            selectedSlots={selectedSlots}\n            toggleSlotSelection={toggleSlotSelection}\n            availableSlotData={availableSlotData}\n          />\n\n          <div className=\"slot-actions\">\n            <button id=\"reserve-btn\" onClick={handleReserveSelected} disabled={!selectedSlots.length}>\n              Reserve Selected ({selectedSlots.length})\n            </button>\n            {selectedSlots.length ? (\n              <span className=\"price-sum\">Total Price: €{totalPrice}</span>\n            ) : (\n              <span>Select slot(s)</span>\n            )}\n            <button id=\"analytics-btn\" onClick={() => setShowAnalytics(true)}>\n              Show Analytics\n            </button>\n          </div>\n        </>\n      ) : (\n        <>\n          <button onClick={() => setShowAnalytics(false)}>← Back to Slots</button>\n          <AnalyticsPage />\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}