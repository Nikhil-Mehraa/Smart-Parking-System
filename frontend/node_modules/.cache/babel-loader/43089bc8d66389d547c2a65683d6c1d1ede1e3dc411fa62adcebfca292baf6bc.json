{"ast":null,"code":"var _jsxFileName = \"/Users/nikhilmehra/Downloads/prototype/final/frontend/src/SlotGrid.js\";\nimport React from 'react';\n\n// function isSlotBooked(slot, date, start, end, endDate) {\n//   if (slot.status === 'reserved') return true;\n//   if (!slot.bookings) return false;\n\n//   const reqStart = new Date(`${date}T${start}:00`).getTime();\n//   const reqEnd = new Date(`${endDate}T${end}:00`).getTime();\n//   return slot.bookings.some(b => {\n//     const bStart = new Date(`${b.date}T${b.start}:00`).getTime();\n//     const bEnd = new Date(`${b.endDate}T${b.end}:00`).getTime();\n//     return !(reqEnd <= bStart || reqStart >= bEnd);\n//   });\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction isSlotBooked(slot, date, start, end, endDate) {\n  // If slot is out of order, do NOT show as booked\n  if (slot.status === 'out_of_order') return false;\n  // If slot is reserved by status, always show as booked\n  if (slot.status === 'reserved') return true;\n  // Only check for overlapping bookings if available\n  if (!slot.bookings || slot.status !== 'available') return false;\n  const reqStart = new Date(`${date}T${start}:00`).getTime();\n  const reqEnd = new Date(`${endDate}T${end}:00`).getTime();\n  return slot.bookings.some(b => {\n    const bStart = new Date(`${b.date}T${b.start}:00`).getTime();\n    const bEnd = new Date(`${b.endDate}T${b.end}:00`).getTime();\n    return !(reqEnd <= bStart || reqStart >= bEnd);\n  });\n}\nfunction SlotGrid({\n  slots,\n  date,\n  start,\n  end,\n  endDate,\n  selectedSlots,\n  toggleSlotSelection,\n  availableSlotData\n}) {\n  if (!slots || !slots.length) return /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"status\",\n    children: \"No slots available.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 12\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"slot-grid\",\n    children: slots.map(slot => {\n      const slotData = availableSlotData.find(s => s.id === slot.id);\n      // Out-of-order is always out of order; reserved is always booked;\n      // available is booked only if isSlotBooked is true\n      const isBooked = slot.status === 'reserved' || slot.status === 'available' && isSlotBooked(slot, date, start, end, endDate);\n      const isSelected = selectedSlots.includes(slot.id);\n      const statusClass = slot.status === 'out_of_order' ? 'out_of_order' : isBooked ? 'reserved' : 'available';\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `slot ${statusClass} ${isSelected ? 'selected' : ''}`,\n        onClick: () => statusClass === 'available' && toggleSlotSelection(slot.id),\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Slot \", slot.id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this), slotData && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"slot-price\",\n          children: [\"\\u20AC\", slotData.price]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 26\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: statusClass === 'reserved' ? 'Booked' : slot.status.replace('_', ' ')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this)]\n      }, slot.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_c = SlotGrid;\nvar _c;\n$RefreshReg$(_c, \"SlotGrid\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","isSlotBooked","slot","date","start","end","endDate","status","bookings","reqStart","Date","getTime","reqEnd","some","b","bStart","bEnd","SlotGrid","slots","selectedSlots","toggleSlotSelection","availableSlotData","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","slotData","find","s","id","isBooked","isSelected","includes","statusClass","onClick","price","replace","_c","$RefreshReg$"],"sources":["/Users/nikhilmehra/Downloads/prototype/final/frontend/src/SlotGrid.js"],"sourcesContent":["import React from 'react';\n\n// function isSlotBooked(slot, date, start, end, endDate) {\n//   if (slot.status === 'reserved') return true;\n//   if (!slot.bookings) return false;\n\n//   const reqStart = new Date(`${date}T${start}:00`).getTime();\n//   const reqEnd = new Date(`${endDate}T${end}:00`).getTime();\n//   return slot.bookings.some(b => {\n//     const bStart = new Date(`${b.date}T${b.start}:00`).getTime();\n//     const bEnd = new Date(`${b.endDate}T${b.end}:00`).getTime();\n//     return !(reqEnd <= bStart || reqStart >= bEnd);\n//   });\n// }\nfunction isSlotBooked(slot, date, start, end, endDate) {\n  // If slot is out of order, do NOT show as booked\n  if (slot.status === 'out_of_order') return false;\n  // If slot is reserved by status, always show as booked\n  if (slot.status === 'reserved') return true;\n  // Only check for overlapping bookings if available\n  if (!slot.bookings || slot.status !== 'available') return false;\n  const reqStart = new Date(`${date}T${start}:00`).getTime();\n  const reqEnd = new Date(`${endDate}T${end}:00`).getTime();\n  return slot.bookings.some(b => {\n    const bStart = new Date(`${b.date}T${b.start}:00`).getTime();\n    const bEnd = new Date(`${b.endDate}T${b.end}:00`).getTime();\n    return !(reqEnd <= bStart || reqStart >= bEnd);\n  });\n}\n\nfunction SlotGrid({\n  slots,\n  date,\n  start,\n  end,\n  endDate,\n  selectedSlots,\n  toggleSlotSelection,\n  availableSlotData,\n}) {\n  if (!slots || !slots.length)\n    return <p className=\"status\">No slots available.</p>;\n\n  return (\n    <div className=\"slot-grid\">\n      {slots.map(slot => {\n        const slotData = availableSlotData.find(s => s.id === slot.id);\n        // Out-of-order is always out of order; reserved is always booked;\n        // available is booked only if isSlotBooked is true\n        const isBooked = slot.status === 'reserved' || \n                         (slot.status === 'available' && \n                          isSlotBooked(slot, date, start, end, endDate));\n        const isSelected = selectedSlots.includes(slot.id);\n\n        const statusClass = slot.status === 'out_of_order' ? 'out_of_order' :\n                           isBooked ? 'reserved' :\n                           'available';\n\n        return (\n          <div\n            key={slot.id}\n            className={`slot ${statusClass} ${isSelected ? 'selected' : ''}`}\n            onClick={() => (statusClass === 'available') && toggleSlotSelection(slot.id)}\n          >\n            <p>Slot {slot.id}</p>\n            {slotData && <p className=\"slot-price\">â‚¬{slotData.price}</p>}\n            <p>{statusClass === 'reserved' ? 'Booked' : slot.status.replace('_', ' ')}</p>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}