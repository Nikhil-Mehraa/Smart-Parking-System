{"ast":null,"code":"var _jsxFileName = \"/Users/nikhilmehra/Downloads/prototype/final/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useMemo } from 'react';\nimport { io } from 'socket.io-client';\nimport SlotGrid from './SlotGrid';\nimport AnalyticsPage from './AnalyticsPage';\nimport TimeSelector from './TimeSelector';\nimport AuthPage from './AuthPage';\nimport './App.css';\nimport { Chart as ChartJS, ArcElement, BarElement, CategoryScale, LinearScale, Title, Tooltip, Legend } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(ArcElement, BarElement, CategoryScale, LinearScale, Title, Tooltip, Legend);\nfunction App() {\n  _s();\n  // --- USER AUTH ---\n  const [currentUser, setCurrentUser] = useState(localStorage.getItem('currentUser'));\n  const handleAuthSuccess = () => setCurrentUser(localStorage.getItem('currentUser'));\n  const handleLogout = () => {\n    localStorage.removeItem('currentUser');\n    setCurrentUser(null);\n  };\n\n  // --- DASHBOARD STATE ---\n  const [slots, setSlots] = useState([]); // <--- ALL SLOTS, not just available ones\n  const [selectedSlots, setSelectedSlots] = useState([]);\n  const [showAnalytics, setShowAnalytics] = useState(false);\n  const [date, setDate] = useState('');\n  const [start, setStart] = useState('');\n  const [end, setEnd] = useState('');\n  const [endDate, setEndDate] = useState('');\n  const [availableSlotData, setAvailableSlotData] = useState([]);\n  const [socket, setSocket] = useState(null);\n\n  // ---- NEW: FETCH ALL SLOTS ON LOAD ----\n  useEffect(() => {\n    // Load ALL slots (for dashboard grid)\n    fetch('http://localhost:4000/api/analytics').then(res => res.json()).then(data => setSlots(data.slots));\n\n    // Socket for real-time updates (keep your existing logic)\n    const newSocket = io('http://localhost:4000');\n    setSocket(newSocket);\n    return () => newSocket.close();\n  }, []);\n\n  // ---- EXISTING: LOAD AVAILABLE SLOTS FOR SELECTED TIME ----\n  useEffect(() => {\n    if (!date || !start || !end || !endDate) return;\n    fetch('http://localhost:4000/api/available-slots', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        date,\n        start,\n        end,\n        endDate\n      })\n    }).then(res => res.json()).then(data => setAvailableSlotData(data.slots));\n  }, [date, start, end, endDate]);\n\n  // ---- Keep your existing price calculation, reserve, and UI logic ----\n  // ...\n\n  if (!currentUser) {\n    return /*#__PURE__*/_jsxDEV(AuthPage, {\n      onAuthSuccess: handleAuthSuccess\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 12\n    }, this);\n  }\n\n  // ---- Keep your existing render, passing both slots (ALL) and availableSlotData\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Parking Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"logout-btn\",\n        onClick: handleLogout,\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SlotGrid, {\n      slots: slots,\n      date: date,\n      start: start,\n      end: end,\n      endDate: endDate,\n      selectedSlots: selectedSlots,\n      availableSlotData: availableSlotData,\n      toggleSlotSelection: slotId => setSelectedSlots(prev => prev.includes(slotId) ? prev.filter(id => id !== slotId) : [...prev, slotId])\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Tt1kqoX0onDYuCasPrcckLEczq8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","useMemo","io","SlotGrid","AnalyticsPage","TimeSelector","AuthPage","Chart","ChartJS","ArcElement","BarElement","CategoryScale","LinearScale","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","App","_s","currentUser","setCurrentUser","localStorage","getItem","handleAuthSuccess","handleLogout","removeItem","slots","setSlots","selectedSlots","setSelectedSlots","showAnalytics","setShowAnalytics","date","setDate","start","setStart","end","setEnd","endDate","setEndDate","availableSlotData","setAvailableSlotData","socket","setSocket","fetch","then","res","json","data","newSocket","close","method","headers","body","JSON","stringify","onAuthSuccess","fileName","_jsxFileName","lineNumber","columnNumber","className","children","onClick","toggleSlotSelection","slotId","prev","includes","filter","id","_c","$RefreshReg$"],"sources":["/Users/nikhilmehra/Downloads/prototype/final/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState, useMemo } from 'react';\nimport { io } from 'socket.io-client';\nimport SlotGrid from './SlotGrid';\nimport AnalyticsPage from './AnalyticsPage';\nimport TimeSelector from './TimeSelector';\nimport AuthPage from './AuthPage';\nimport './App.css';\nimport { Chart as ChartJS, ArcElement, BarElement, CategoryScale, LinearScale, Title, Tooltip, Legend } from 'chart.js';\nChartJS.register(ArcElement, BarElement, CategoryScale, LinearScale, Title, Tooltip, Legend);\n\nfunction App() {\n  // --- USER AUTH ---\n  const [currentUser, setCurrentUser] = useState(localStorage.getItem('currentUser'));\n  const handleAuthSuccess = () => setCurrentUser(localStorage.getItem('currentUser'));\n  const handleLogout = () => {\n    localStorage.removeItem('currentUser');\n    setCurrentUser(null);\n  };\n\n  // --- DASHBOARD STATE ---\n  const [slots, setSlots] = useState([]);        // <--- ALL SLOTS, not just available ones\n  const [selectedSlots, setSelectedSlots] = useState([]);\n  const [showAnalytics, setShowAnalytics] = useState(false);\n  const [date, setDate] = useState('');\n  const [start, setStart] = useState('');\n  const [end, setEnd] = useState('');\n  const [endDate, setEndDate] = useState('');\n  const [availableSlotData, setAvailableSlotData] = useState([]);\n  const [socket, setSocket] = useState(null);\n\n  // ---- NEW: FETCH ALL SLOTS ON LOAD ----\n  useEffect(() => {\n    // Load ALL slots (for dashboard grid)\n    fetch('http://localhost:4000/api/analytics')\n      .then(res => res.json())\n      .then(data => setSlots(data.slots));\n\n    // Socket for real-time updates (keep your existing logic)\n    const newSocket = io('http://localhost:4000');\n    setSocket(newSocket);\n    return () => newSocket.close();\n  }, []);\n\n  // ---- EXISTING: LOAD AVAILABLE SLOTS FOR SELECTED TIME ----\n  useEffect(() => {\n    if (!date || !start || !end || !endDate) return;\n    fetch('http://localhost:4000/api/available-slots', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ date, start, end, endDate })\n    })\n      .then((res) => res.json())\n      .then((data) => setAvailableSlotData(data.slots));\n  }, [date, start, end, endDate]);\n\n  // ---- Keep your existing price calculation, reserve, and UI logic ----\n  // ...\n\n  if (!currentUser) {\n    return <AuthPage onAuthSuccess={handleAuthSuccess} />;\n  }\n\n  // ---- Keep your existing render, passing both slots (ALL) and availableSlotData\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Parking Dashboard</h1>\n        <button className=\"logout-btn\" onClick={handleLogout}>Logout</button>\n      </header>\n      {/* ... your existing TimeSelector, buttons, analytics toggle ... */}\n      <SlotGrid \n        slots={slots} \n        date={date} \n        start={start} \n        end={end} \n        endDate={endDate} \n        selectedSlots={selectedSlots}\n        availableSlotData={availableSlotData}\n        toggleSlotSelection={(slotId) => \n          setSelectedSlots(prev =>\n            prev.includes(slotId) ? prev.filter(id => id !== slotId) : [...prev, slotId]\n          )\n        }\n      />\n    </div>\n  );\n}\n\nexport default App;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}