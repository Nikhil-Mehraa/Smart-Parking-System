{"ast":null,"code":"var _jsxFileName = \"/Users/nikhilmehra/Downloads/prototype/ise-prototype copy 2/frontend/src/SlotGrid.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction isSlotBooked(slot, date, start, end, endDate) {\n  if (slot.status === 'reserved') return true;\n  if (!slot.bookings) return false;\n  const reqStart = new Date(`${date}T${start}:00`).getTime();\n  const reqEnd = new Date(`${endDate}T${end}:00`).getTime();\n  return slot.bookings.some(b => {\n    const bStart = new Date(`${b.date}T${b.start}:00`).getTime();\n    const bEnd = new Date(`${b.endDate}T${b.end}:00`).getTime();\n    return !(reqEnd <= bStart || reqStart >= bEnd);\n  });\n}\nexport default function SlotGrid({\n  slots,\n  date,\n  start,\n  end,\n  endDate,\n  selectedSlots,\n  toggleSlotSelection,\n  availableSlotData\n}) {\n  if (!slots || !slots.length) return /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"status\",\n    children: \"No slots available.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 12\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"slot-grid\",\n    children: slots.map(slot => {\n      const slotData = availableSlotData.find(s => s.id === slot.id);\n      const isBooked = isSlotBooked(slot, date, start, end, endDate) || (slotData === null || slotData === void 0 ? void 0 : slotData.booked) && slotData.booked;\n      const isSelected = selectedSlots.includes(slot.id);\n      let statusClass = '';\n      if (isBooked) statusClass = 'reserved';else if (slot.status === 'out_of_order') statusClass = 'out_of_order';else statusClass = 'available';\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `slot ${statusClass} ${isSelected ? 'selected' : ''}`,\n        onClick: () => !isBooked && toggleSlotSelection(slot.id),\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Slot \", slot.id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this), slotData && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"slot-price\",\n          children: [\"\\u20AC\", slotData.price]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 26\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: isBooked ? 'Booked' : slot.status.replace('_', ' ')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this)]\n      }, slot.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n_c = SlotGrid;\nvar _c;\n$RefreshReg$(_c, \"SlotGrid\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","isSlotBooked","slot","date","start","end","endDate","status","bookings","reqStart","Date","getTime","reqEnd","some","b","bStart","bEnd","SlotGrid","slots","selectedSlots","toggleSlotSelection","availableSlotData","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","slotData","find","s","id","isBooked","booked","isSelected","includes","statusClass","onClick","price","replace","_c","$RefreshReg$"],"sources":["/Users/nikhilmehra/Downloads/prototype/ise-prototype copy 2/frontend/src/SlotGrid.js"],"sourcesContent":["import React from 'react';\n\nfunction isSlotBooked(slot, date, start, end, endDate) {\n  if (slot.status === 'reserved') return true;\n  if (!slot.bookings) return false;\n\n  const reqStart = new Date(`${date}T${start}:00`).getTime();\n  const reqEnd = new Date(`${endDate}T${end}:00`).getTime();\n  return slot.bookings.some(b => {\n    const bStart = new Date(`${b.date}T${b.start}:00`).getTime();\n    const bEnd = new Date(`${b.endDate}T${b.end}:00`).getTime();\n    return !(reqEnd <= bStart || reqStart >= bEnd);\n  });\n}\n\nexport default function SlotGrid({\n  slots,\n  date,\n  start,\n  end,\n  endDate,\n  selectedSlots,\n  toggleSlotSelection,\n  availableSlotData,\n}) {\n  if (!slots || !slots.length)\n    return <p className=\"status\">No slots available.</p>;\n\n  return (\n    <div className=\"slot-grid\">\n      {slots.map(slot => {\n        const slotData = availableSlotData.find(s => s.id === slot.id);\n        const isBooked = isSlotBooked(slot, date, start, end, endDate) || (slotData?.booked && slotData.booked);\n        const isSelected = selectedSlots.includes(slot.id);\n\n        let statusClass = '';\n        if (isBooked) statusClass = 'reserved';\n        else if (slot.status === 'out_of_order') statusClass = 'out_of_order';\n        else statusClass = 'available';\n\n        return (\n          <div\n            key={slot.id}\n            className={`slot ${statusClass} ${isSelected ? 'selected' : ''}`}\n            onClick={() => !isBooked && toggleSlotSelection(slot.id)}\n          >\n            <p>Slot {slot.id}</p>\n            {slotData && <p className=\"slot-price\">â‚¬{slotData.price}</p>}\n            <p>{isBooked ? 'Booked' : slot.status.replace('_', ' ')}</p>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}